# PYTHON GENIUS SCRAPER using lyricsgenius
import lyricsgenius
import os
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())

GENIUS_API_KEY = os.environ.get('GENIUS_API_KEY')
if not GENIUS_API_KEY:
    print("Error: GENIUS_API_KEY not found in environment variables.")
    exit()

# Initialize lyricsgenius
# You might want to adjust timeout and retries based on your needs
genius = lyricsgenius.Genius(GENIUS_API_KEY,
                             skip_non_songs=True,
                             excluded_terms=["(Remix)", "(Live)"],
                             remove_section_headers=True,
                             timeout=15,
                             retries=3,
                             verbose=True,
                             user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')

# list of artists to scrape from
artists_to_scrape = [
            'Britney Spears',
            # 'Queen',
            # 'OneRepublic',
            # 'Whitney Houston',
            # 'Stevie Wonder',
            # 'Bon Jovi',
            # 'Avril Lavigne',
            # 'Carly Rae Jepsen',
            # 'David Bowie',
            # 'Amy Winehouse',
            # 'Christina Aguilera',
            # 'Gwen Stefani',
            # 'Coldplay',
            # 'Frank Sinatra',
            # 'Celine Dion',
            # 'Backstreet Boys',
            # 'Janet Jackson',
            # 'Jennifer Lopez',
            # 'Meghan Trainor',
            # 'Ellie Goulding',
            # 'Nelly Furtado',
            # 'Justin Bieber',
            # 'Katy Perry',
            # 'Bruno Mars',
            # 'Beyonce',
            # 'Lorde',
            # 'The Weeknd',
            # 'John Legend',
            # 'Rihanna',
            # 'Lady Gaga',
            # 'Usher',
            # 'Miley Cyrus',
            # 'Taylor Swift',
            # 'Major Lazer',
            # 'One Direction',
            # 'Ed Sheeran',
            # 'Sia',
            # 'Ariana Grande',
            # 'Calvin Harris',
            # 'Mariah Carey',
            # 'Madonna',
            # 'Elton John',
            # 'The Beatles',
            # 'Michael Jackson',
            # 'Bee Gees',
            # 'Prince',
            # 'Maroon 5',
            # 'The Black Eyed Peas',
            # 'P!NK',
            # 'TLC',
            # 'R. Kelly', # Note: Consider ethical implications of scraping certain artists
            # 'Kelly Clarkson',
            # 'Justin Timberlake',
            # 'Alessia Cara',
            # 'Shawn Mendes',
            # 'Hailee Steinfeld',
            # 'Jason Derulo',
            # 'Adele',
            # 'Zedd',
            # 'Train',
            # 'Selena Gomez',
            # 'Kygo',
        ]

def scrape_lyrics(output_file='data/input.txt', max_songs_per_artist=5):
    # Create data directory if it doesn't exist
    os.makedirs('data', exist_ok=True)

    # Clear the input file before starting or create it with a header
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("LYRICS COLLECTION (Generated by lyricsgenius)\n\n")

    total_songs_scraped = 0

    for artist_name in artists_to_scrape:
        print(f"\nSearching for songs by {artist_name}...")
        songs_scraped_for_artist = 0
        try:
            # Search for the artist
            artist = genius.search_artist(artist_name, max_songs=max_songs_per_artist, sort='popularity')

            if artist:
                print(f"Found artist: {artist.name}. Scraping top {max_songs_per_artist} songs...")
                # The library handles getting the songs internally now
                for song in artist.songs:
                    if song and song.lyrics:
                        # Sanitize lyrics (optional, lyricsgenius does some cleaning)
                        lyrics = song.lyrics.strip()
                        # Avoid excessively short entries that might not be full lyrics
                        if len(lyrics.split()) > 10:
                            with open(output_file, 'a', encoding='utf-8') as f:
                                f.write(f"\n\n--- {song.title} by {song.artist} ---\n")
                                f.write(lyrics)
                                f.write("\n" + "="*50 + "\n")
                            print(f"  Successfully scraped: {song.title}")
                            songs_scraped_for_artist += 1
                            total_songs_scraped += 1
                        else:
                            print(f"  Skipped (lyrics too short): {song.title}")
                    else:
                         print(f"  Could not find lyrics for: {song.title if song else 'Unknown Song'}")

                if songs_scraped_for_artist == 0:
                     print(f"  No suitable lyrics found for top songs of {artist_name}.")

            else:
                print(f"Could not find artist: {artist_name}")

        except Exception as e:
            # Catch potential errors during API requests or processing
            print(f"Error searching for or processing {artist_name}: {str(e)}")
            # You might want to add a delay here before retrying or moving to the next artist
            # import time
            # time.sleep(5)
            continue # Move to the next artist

    print(f"\nScraping completed! Scraped {total_songs_scraped} songs.")
    print(f"Check {output_file} for results.")


if __name__ == "__main__":
    print("Starting lyrics scraper using lyricsgenius...")
    scrape_lyrics(max_songs_per_artist=5) # Adjust max songs as needed